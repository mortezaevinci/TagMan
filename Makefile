# This file generated by staff_codegen
# For more information please visit: http://code.google.com/p/staff/

INTERFACES := wsOCR1.h
COMPONENT := wsocr1
CODEGEN_WSDLS := wsOCR1.wsdl

PLATFORM ?= $(shell $(CXX) -dumpmachine)
ifeq ($(shell uname -o 2>/dev/null),Msys)
  OS := MINGW
else
  OS := $(shell uname -s)
endif

ifeq ($(OS),Darwin)
  LIBPREFIX = lib
  LIBEXT = .dylib
  LDLIB = -dynamiclib -Wl,-dylib_install_name -Wl,
  CXXFLAGS += -fPIC
  LDFLAGS += -fPIC
else
ifeq ($(OS),MINGW)
  LIBPREFIX =
  LIBEXT = .dll
  LDLIB = -shared -Wl,-soname,
  export STAFF_HOME := $(subst :,,$(subst \,/,/$(STAFF_HOME)))
  CFLAGS += -DAXIS2_SKIP_INT_TYPEDEFS
  CXXFLAGS += -DAXIS2_SKIP_INT_TYPEDEFS
else
  LIBPREFIX = lib
  LIBEXT = .so
  LDLIB = -shared -Wl,-soname,
  CXXFLAGS += -fPIC
  LDFLAGS += -fPIC
endif
endif


SRCDIR = src/
OBJDIR = obj/$(PLATFORM)/
OUTDIR = out/$(PLATFORM)/

ifneq ($(DEBUG),)
  CXXFLAGS += -D_DEBUG -g -O0
  LDFLAGS += -g -O0
endif

ifneq ($(HOST_STAFF_HOME),)
  STAFF_CODEGEN ?= STAFF_HOME=$(HOST_STAFF_HOME) $(HOST_STAFF_HOME)/bin/staff_codegen
else
ifneq ($(STAFF_HOME),)
  STAFF_CODEGEN ?= $(STAFF_HOME)/bin/staff_codegen
else
  STAFF_CODEGEN ?= staff_codegen
endif
endif

ifneq ($(STAFF_HOME),)
  CXXFLAGS += -I$(STAFF_HOME)/include/
  LDFLAGS += -L$(STAFF_HOME)/lib
  INSTALLDIR = $(STAFF_HOME)/components/
else
  INSTALLDIR = /usr/lib/staff/components/
endif


TARGETNAME = $(LIBPREFIX)$(COMPONENT)$(LIBEXT)

LDFLAGS += -lstaffutils -lstaffxml -lstaffcommon -lstaffcomponent
LDFLAGS += $(LDLIB)$(TARGETNAME)

CODEGEN_WSDLS_OUT := $(patsubst %,$(OUTDIR)%,$(CODEGEN_WSDLS))
CODEGEN_INTERFACES := $(patsubst %.h,$(SRCDIR)%.h,$(INTERFACES))
CODEGEN_HEADERS := $(patsubst %.h,%Wrapper.h,$(CODEGEN_INTERFACES)) $(SRCDIR)ComponentImpl.h
CODEGEN_SOURCES := $(patsubst %.h,%Wrapper.cpp,$(CODEGEN_INTERFACES)) $(SRCDIR)ComponentImpl.cpp
CODEGEN_FILES := $(CODEGEN_HEADERS) $(CODEGEN_SOURCES) $(CODEGEN_WSDLS_OUT)

NON_CODEGEN_SOURCES := $(filter-out $(CODEGEN_SOURCES),$(wildcard $(SRCDIR)*.cpp))
SOURCES := $(CODEGEN_SOURCES) $(NON_CODEGEN_SOURCES)
OBJECTS := $(patsubst $(SRCDIR)%.cpp,$(OBJDIR)%.o,$(SOURCES))

.NOTPARALLEL: $(CODEGEN_FILES)

# == make ===========================================
make: "$(OBJDIR)" "$(OUTDIR)" $(OUTDIR)$(TARGETNAME)

all: make

# link
$(OUTDIR)$(TARGETNAME): $(OBJECTS)
	$(CXX) $(OBJECTS) -o $(OUTDIR)$(TARGETNAME) $(LDFLAGS)

# compile
$(OBJDIR)%.o: $(SRCDIR)%.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(NON_CODEGEN_SOURCES): $(CODEGEN_FILES)

$(SRCDIR)%Wrapper.h $(SRCDIR)%Wrapper.cpp:: $(SRCDIR)%.h
	$(STAFF_CODEGEN) -u -tcomponent -c$(SRCDIR) $(INTERFACES)

$(SRCDIR)ComponentImpl.h $(SRCDIR)ComponentImpl.cpp:: $(CODEGEN_INTERFACES)
	$(STAFF_CODEGEN) -u -tcomponent -c$(SRCDIR) $(INTERFACES)

$(OUTDIR)wsOCR1.wsdl: $(SRCDIR)wsOCR1.h
	$(STAFF_CODEGEN) -u -twsdl $(patsubst $(SRCDIR)%,%,$<) -i$(SRCDIR) -o$(OUTDIR)

# == install ========================================
install: "$(INSTALLDIR)$(COMDIR)$(COMPONENT)/"
	cp -f $(OUTDIR)$(TARGETNAME) $(INSTALLDIR)$(COMDIR)$(COMPONENT)/
	cp -f $(OUTDIR)wsOCR1.wsdl $(INSTALLDIR)$(COMDIR)$(COMPONENT)/

# == uninstall ======================================
uninstall:
	rm -f $(INSTALLDIR)$(COMDIR)$(COMPONENT)/$(TARGETNAME)
	rm -f $(INSTALLDIR)$(COMDIR)$(COMPONENT)/wsOCR1.wsdl
	test ! -d $(INSTALLDIR)$(COMDIR)$(COMPONENT) || rmdir $(INSTALLDIR)$(COMDIR)$(COMPONENT)

# == clean ==========================================
clean:
	rm -f $(OUTDIR)$(TARGETNAME) $(OBJECTS) $(CODEGEN_FILES)
	-test ! -d $(OBJDIR) || rmdir -p $(OBJDIR)
	-test ! -d $(OUTDIR) || rmdir -p $(OUTDIR)

# == mkdir ==========================================
"%/":
	@[ -z "$@" -o -d "$@" ] || mkdir -p $@ && chmod g+w $@
