// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#include <staff/utils/SharedPtr.h>
#include <staff/utils/Log.h>
#include <staff/utils/fromstring.h>
#include <staff/utils/tostring.h>
#include <staff/utils/HexBinary.h>
#include <staff/utils/Base64Binary.h>
#include <staff/common/Attribute.h>
#include <staff/common/Exception.h>
#include <staff/common/DataObject.h>
#include <staff/common/Operation.h>
#include <staff/common/IService.h>
#include <staff/component/ServiceInstanceManager.h>
#include <staff/component/Component.h>
#include "wsOCRImpl.h"
#include "wsOCRWrapper.h"

namespace staff
{

///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef deserializators
}




wsOCRWrapper::wsOCRWrapper(staff::Component* pComponent):
  m_pComponent(pComponent)
{
}

wsOCRWrapper::~wsOCRWrapper()
{
}

void wsOCRWrapper::Invoke(staff::Operation& rOperation, const std::string& sSessionId, const std::string& sInstanceId)
{
  const staff::DataObject& rRequest = rOperation.Request();
  const std::string& sOperationName = rOperation.GetName();

  if (sOperationName == "GetServiceDescription")
  {
    rOperation.SetResponse(GetServiceDescription());
  }
  else
  if (sOperationName == "CreateInstance")
  {
    staff::ServiceInstanceManager::Inst().CreateServiceInstance(sSessionId, m_sName,
                                                                rRequest.GetChildTextByLocalName("sInstanceId"));
  }
  else
  if (sOperationName == "FreeInstance")
  {
    staff::ServiceInstanceManager::Inst().FreeServiceInstance(sSessionId, m_sName,
                                                              rRequest.GetChildTextByLocalName("sInstanceId"));
  }
  else
  {
    staff::SharedPtr<wsOCRImpl> tpServiceImpl = GetImpl(sSessionId, sInstanceId);
    if (sOperationName == "sendClientID")
    {
      double clientID = 0;
      rRequest.GetChildValueByLocalName("clientID", clientID);
      rOperation.Result().SetValue(tpServiceImpl->sendClientID(clientID));
    }
    else
    if (sOperationName == "receiveContent")
    {
      int linker = 0;
      int flag = 0;
      rRequest.GetChildValueByLocalName("linker", linker);
      rRequest.GetChildValueByLocalName("flag", flag);
      rOperation.Result().SetValue(tpServiceImpl->receiveContent(linker, flag));
    }
    else
    if (sOperationName == "sendContent")
    {
      int linker = 0;
      int flag = 0;
      rRequest.GetChildValueByLocalName("linker", linker);
      rRequest.GetChildValueByLocalName("flag", flag);
      tpServiceImpl->sendContent(rRequest.GetChildTextByLocalName("content"), linker, flag);
    }
    else
    if (sOperationName == "sendFile")
    {
      tpServiceImpl->sendFile(rRequest.GetChildTextByLocalName("fileContent"), rRequest.GetChildTextByLocalName("fileAddress"));
    }
    else
    if (sOperationName == "sendFile")
    {
      rOperation.Result().SetValue(tpServiceImpl->sendFile(rRequest.GetChildTextByLocalName("fileContent")));
    }
    else
    if (sOperationName == "sendFileClient")
    {
      rOperation.Result().SetValue(tpServiceImpl->sendFileClient(rRequest.GetChildTextByLocalName("fileContent")));
    }
    else
    if (sOperationName == "receiveFile")
    {
      rOperation.Result().SetValue(tpServiceImpl->receiveFile(rRequest.GetChildTextByLocalName("fileAddress")));
    }
    else
    if (sOperationName == "sendFileInfo")
    {
      tpServiceImpl->sendFileInfo(rRequest.GetChildTextByLocalName("filename"), rRequest.GetChildTextByLocalName("fileInfo"));
    }
    else
    if (sOperationName == "receiveFileInfo")
    {
      rOperation.Result().SetValue(tpServiceImpl->receiveFileInfo(rRequest.GetChildTextByLocalName("filename")));
    }
    else
    if (sOperationName == "doOCR")
    {
      tpServiceImpl->doOCR(rRequest.GetChildTextByLocalName("fileAddress"));
    }
    else
    if (sOperationName == "doOCR")
    {
      double clientID = 0;
      rRequest.GetChildValueByLocalName("clientID", clientID);
      tpServiceImpl->doOCR(clientID);
    }
    else
    if (sOperationName == "receiveOCR")
    {
      rOperation.Result().SetValue(tpServiceImpl->receiveOCR(rRequest.GetChildTextByLocalName("fileAddress")));
    }
    else
    if (sOperationName == "perform")
    {
      rOperation.Result().SetValue(tpServiceImpl->perform(rRequest.GetChildTextByLocalName("AppData")));
    }
    else
    {
      STAFF_THROW(staff::RemoteException, "Unknown Operation: " + rOperation.GetName());
    }

    rOperation.GetResponse().SetNamespaceUriGenPrefix("http://tempui.org/" + m_pComponent->GetName());
  }
}

const std::string& wsOCRWrapper::GetName() const
{
  return m_sName;
}

const std::string& wsOCRWrapper::GetDescr() const
{
  return m_sDescr;
}

const staff::Component* wsOCRWrapper::GetComponent() const
{
  return m_pComponent;
}

staff::Component* wsOCRWrapper::GetComponent()
{
  return m_pComponent;
}

staff::PIService& wsOCRWrapper::GetImpl(const std::string& sSessionId, const std::string& sInstanceId)
{
  return staff::ServiceInstanceManager::Inst().GetServiceInstance(sSessionId, m_sName, sInstanceId);
}

staff::PIService wsOCRWrapper::NewImpl()
{
  return new wsOCRImpl;
}

bool wsOCRWrapper::IsLoadAtStartup() const
{
  return false;
}

std::string wsOCRWrapper::GetDependencies() const
{
  return "";
}

staff::DataObject wsOCRWrapper::GetOperations() const
{
  staff::DataObject tOperations("Operations");

  {// Operation: double sendClientID(double clientID)
    staff::DataObject tOpsendClientID = tOperations.CreateChild("Operation");
    tOpsendClientID.CreateChild("Name", "sendClientID");
    tOpsendClientID.CreateChild("RestMethod", "GET");
    tOpsendClientID.CreateChild("RestLocation", "sendClientID/clientID={clientID}");
  }
  {// Operation: std::string receiveContent(int linker, int flag)
    staff::DataObject tOpreceiveContent = tOperations.CreateChild("Operation");
    tOpreceiveContent.CreateChild("Name", "receiveContent");
    tOpreceiveContent.CreateChild("RestMethod", "");
    tOpreceiveContent.CreateChild("RestLocation", "");
  }
  {// Operation: void sendContent(std::string content, int linker, int flag)
    staff::DataObject tOpsendContent = tOperations.CreateChild("Operation");
    tOpsendContent.CreateChild("Name", "sendContent");
    tOpsendContent.CreateChild("RestMethod", "");
    tOpsendContent.CreateChild("RestLocation", "");
  }
  {// Operation: void sendFile(std::string fileContent, std::string fileAddress)
    staff::DataObject tOpsendFile = tOperations.CreateChild("Operation");
    tOpsendFile.CreateChild("Name", "sendFile");
    tOpsendFile.CreateChild("RestMethod", "");
    tOpsendFile.CreateChild("RestLocation", "");
  }
  {// Operation: std::string sendFile(std::string fileContent)
    staff::DataObject tOpsendFile = tOperations.CreateChild("Operation");
    tOpsendFile.CreateChild("Name", "sendFile");
    tOpsendFile.CreateChild("RestMethod", "");
    tOpsendFile.CreateChild("RestLocation", "");
  }
  {// Operation: int sendFileClient(std::string fileContent)
    staff::DataObject tOpsendFileClient = tOperations.CreateChild("Operation");
    tOpsendFileClient.CreateChild("Name", "sendFileClient");
    tOpsendFileClient.CreateChild("RestMethod", "");
    tOpsendFileClient.CreateChild("RestLocation", "");
  }
  {// Operation: std::string receiveFile(std::string fileAddress)
    staff::DataObject tOpreceiveFile = tOperations.CreateChild("Operation");
    tOpreceiveFile.CreateChild("Name", "receiveFile");
    tOpreceiveFile.CreateChild("RestMethod", "");
    tOpreceiveFile.CreateChild("RestLocation", "");
  }
  {// Operation: void sendFileInfo(std::string filename, std::string fileInfo)
    staff::DataObject tOpsendFileInfo = tOperations.CreateChild("Operation");
    tOpsendFileInfo.CreateChild("Name", "sendFileInfo");
    tOpsendFileInfo.CreateChild("RestMethod", "");
    tOpsendFileInfo.CreateChild("RestLocation", "");
  }
  {// Operation: std::string receiveFileInfo(std::string filename)
    staff::DataObject tOpreceiveFileInfo = tOperations.CreateChild("Operation");
    tOpreceiveFileInfo.CreateChild("Name", "receiveFileInfo");
    tOpreceiveFileInfo.CreateChild("RestMethod", "");
    tOpreceiveFileInfo.CreateChild("RestLocation", "");
  }
  {// Operation: void doOCR(std::string fileAddress)
    staff::DataObject tOpdoOCR = tOperations.CreateChild("Operation");
    tOpdoOCR.CreateChild("Name", "doOCR");
    tOpdoOCR.CreateChild("RestMethod", "");
    tOpdoOCR.CreateChild("RestLocation", "");
  }
  {// Operation: void doOCR(double clientID)
    staff::DataObject tOpdoOCR = tOperations.CreateChild("Operation");
    tOpdoOCR.CreateChild("Name", "doOCR");
    tOpdoOCR.CreateChild("RestMethod", "");
    tOpdoOCR.CreateChild("RestLocation", "");
  }
  {// Operation: std::string receiveOCR(std::string fileAddress)
    staff::DataObject tOpreceiveOCR = tOperations.CreateChild("Operation");
    tOpreceiveOCR.CreateChild("Name", "receiveOCR");
    tOpreceiveOCR.CreateChild("RestMethod", "GET");
    tOpreceiveOCR.CreateChild("RestLocation", "receiveOCR/fileAddress={fileAddress}");
  }
  {// Operation: std::string perform(std::string AppData)
    staff::DataObject tOpperform = tOperations.CreateChild("Operation");
    tOpperform.CreateChild("Name", "perform");
    tOpperform.CreateChild("RestMethod", "");
    tOpperform.CreateChild("RestLocation", "");
  }

  return tOperations;
}

staff::DataObject wsOCRWrapper::GetServiceDescription() const
{
  staff::DataObject tServiceDescription;

  tServiceDescription.Create("ServiceDescription");
  tServiceDescription.DeclareDefaultNamespace("http://tempui.org/staff/service-description");

  tServiceDescription.CreateChild("Name", m_sName);
  tServiceDescription.CreateChild("Description", m_sDescr);

  tServiceDescription.AppendChild(GetOperations());

  return tServiceDescription;
}

const std::string wsOCRWrapper::m_sName = "wsOCR";
const std::string wsOCRWrapper::m_sDescr = "wsOCR1 service";



