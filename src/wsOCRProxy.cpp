// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#include <memory>
#include <staff/utils/SharedPtr.h>
#include <staff/utils/Log.h>
#include <staff/utils/fromstring.h>
#include <staff/utils/tostring.h>
#include <staff/utils/HexBinary.h>
#include <staff/utils/Base64Binary.h>
#include <staff/common/DataObject.h>
#include <staff/common/Attribute.h>
#include <staff/common/Operation.h>
#include <staff/common/Exception.h>
#include <staff/client/ServiceFactory.h>
#include <staff/client/IProxyAllocator.h>
#include <staff/client/ICallback.h>
#include <staff/client/Options.h>
#include "wsOCRProxy.h"

namespace staff
{

///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef deserializators
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// classes implementation



// proxy allocator
class wsOCRProxyAllocator: public staff::IProxyAllocator
{
public:
  wsOCRProxyAllocator()
  {
    try
    {
      staff::ServiceFactory::Inst().RegisterProxyAllocator(typeid(wsOCR).name(), *this);
    }
    STAFF_CATCH_ALL_DESCR("Failed to register proxy allocator wsOCR");
  }

  virtual staff::IService* AllocateProxy(const std::string& sServiceUri,
                                         const std::string& sSessionId,
                                         const std::string& sInstanceId)
  {
    std::auto_ptr<wsOCRProxy> tpProxy(new wsOCRProxy);
    tpProxy->Init(sServiceUri, sSessionId, sInstanceId);
    return tpProxy.release();
  }

  virtual staff::IService* AllocateProxy(const std::string& sBaseUri,
                                         const std::string& sServiceName,
                                         const std::string& sSessionId,
                                         const std::string& sInstanceId)
  {
    std::auto_ptr<wsOCRProxy> tpProxy(new wsOCRProxy);
    tpProxy->Init(sBaseUri + (sServiceName.empty() ? "wsOCR" : sServiceName),
                  sSessionId, sInstanceId);
    return tpProxy.release();
  }
};

wsOCRProxyAllocator twsOCRProxyAllocatorInitializer;

// asynch proxies


// service proxy
wsOCRProxy::wsOCRProxy()
{
}

wsOCRProxy::~wsOCRProxy()
{
  try
  {
    Deinit();
  }
  STAFF_CATCH_ALL;
}

void wsOCRProxy::Init(const std::string& sServiceUri, const std::string& sSessionId, const std::string& sInstanceId)
{
  staff::IService::Init("wsOCR", sSessionId, sInstanceId);
  m_sServiceUri = !sServiceUri.empty() ? sServiceUri : "http://localhost:9090/axis2/services/wsOCR";
  m_tClient.Init(m_sServiceUri);
  staff::Options& rOptions = m_tClient.GetOptions();

  rOptions.SetSessionId(sSessionId);

  if (!sInstanceId.empty())
  {
    staff::Operation tOperation("CreateInstance");
    tOperation.Request().CreateChild("sInstanceId").SetText(sInstanceId);
    tOperation.SetResponse(m_tClient.Invoke(tOperation.Request()));
    if (m_tClient.GetLastResponseHasFault())
    {
      STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                             tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
      STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " +
                  tOperation.GetResponse().ToString()); // other fault
    }
    rOptions.SetInstanceId(sInstanceId);
  }
}

void wsOCRProxy::Deinit()
{
  if (!staff::IService::GetInstanceId().empty())
  {
    staff::Operation tOperation("FreeInstance");
    tOperation.Request().CreateChild("sInstanceId").SetText(staff::IService::GetInstanceId());
    tOperation.SetResponse(m_tClient.Invoke(tOperation.Request()));
    if (m_tClient.GetLastResponseHasFault())
    {
      STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                             tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
      STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " +
                  tOperation.GetResponse().ToString()); // other fault
    }
  }
}

staff::ServiceClient* wsOCRProxy::GetClient()
{
  return &m_tClient;
}


double wsOCRProxy::sendClientID(double clientID)
{
  staff::Options& rOptions = m_tClient.GetOptions();
  rOptions.EnableRest(true);
  rOptions.SetToAddress(m_sServiceUri + "/sendClientID/clientID=" + staff::ToString(clientID));
  rOptions.SetHttpMethod("GET");
  staff::Operation tOperation("sendClientID");
  staff::DataObject& rdoRequest = tOperation.Request();
  // synchronous call
  tOperation.SetResponse(m_tClient.Invoke(rdoRequest));
  if (m_tClient.GetLastResponseHasFault())
  {
    STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                           tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
    STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " + tOperation.GetResponse().ToString()); // other fault
  }

  const staff::DataObject& rdoResult = tOperation.ResultOpt();
  double tReturn = 0;
  rdoResult.GetValue(tReturn);
  return tReturn;
}

std::string wsOCRProxy::receiveContent(int linker, int flag)
{
  staff::Operation tOperation("receiveContent");
  staff::DataObject& rdoRequest = tOperation.Request();
  rdoRequest.CreateChild("linker", linker);
  rdoRequest.CreateChild("flag", flag);

  // synchronous call
  tOperation.SetResponse(m_tClient.Invoke(rdoRequest));
  if (m_tClient.GetLastResponseHasFault())
  {
    STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                           tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
    STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " + tOperation.GetResponse().ToString()); // other fault
  }

  const staff::DataObject& rdoResult = tOperation.ResultOpt();
  return rdoResult.GetText();
}

void wsOCRProxy::sendContent(std::string content, int linker, int flag)
{
  staff::Operation tOperation("sendContent");
  staff::DataObject& rdoRequest = tOperation.Request();
  rdoRequest.CreateChild("content", content);
  rdoRequest.CreateChild("linker", linker);
  rdoRequest.CreateChild("flag", flag);

  // synchronous call
  tOperation.SetResponse(m_tClient.Invoke(rdoRequest));
  if (m_tClient.GetLastResponseHasFault())
  {
    STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                           tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
    STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " + tOperation.GetResponse().ToString()); // other fault
  }
}

void wsOCRProxy::sendFile(std::string fileContent, std::string fileAddress)
{
  staff::Operation tOperation("sendFile");
  staff::DataObject& rdoRequest = tOperation.Request();
  rdoRequest.CreateChild("fileContent", fileContent);
  rdoRequest.CreateChild("fileAddress", fileAddress);

  // synchronous call
  tOperation.SetResponse(m_tClient.Invoke(rdoRequest));
  if (m_tClient.GetLastResponseHasFault())
  {
    STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                           tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
    STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " + tOperation.GetResponse().ToString()); // other fault
  }
}

std::string wsOCRProxy::sendFile(std::string fileContent)
{
  staff::Operation tOperation("sendFile");
  staff::DataObject& rdoRequest = tOperation.Request();
  rdoRequest.CreateChild("fileContent", fileContent);

  // synchronous call
  tOperation.SetResponse(m_tClient.Invoke(rdoRequest));
  if (m_tClient.GetLastResponseHasFault())
  {
    STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                           tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
    STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " + tOperation.GetResponse().ToString()); // other fault
  }

  const staff::DataObject& rdoResult = tOperation.ResultOpt();
  return rdoResult.GetText();
}

int wsOCRProxy::sendFileClient(std::string fileContent)
{
  staff::Operation tOperation("sendFileClient");
  staff::DataObject& rdoRequest = tOperation.Request();
  rdoRequest.CreateChild("fileContent", fileContent);

  // synchronous call
  tOperation.SetResponse(m_tClient.Invoke(rdoRequest));
  if (m_tClient.GetLastResponseHasFault())
  {
    STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                           tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
    STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " + tOperation.GetResponse().ToString()); // other fault
  }

  const staff::DataObject& rdoResult = tOperation.ResultOpt();
  int tReturn = 0;
  rdoResult.GetValue(tReturn);
  return tReturn;
}

std::string wsOCRProxy::receiveFile(std::string fileAddress)
{
  staff::Operation tOperation("receiveFile");
  staff::DataObject& rdoRequest = tOperation.Request();
  rdoRequest.CreateChild("fileAddress", fileAddress);

  // synchronous call
  tOperation.SetResponse(m_tClient.Invoke(rdoRequest));
  if (m_tClient.GetLastResponseHasFault())
  {
    STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                           tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
    STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " + tOperation.GetResponse().ToString()); // other fault
  }

  const staff::DataObject& rdoResult = tOperation.ResultOpt();
  return rdoResult.GetText();
}

void wsOCRProxy::sendFileInfo(std::string filename, std::string fileInfo)
{
  staff::Operation tOperation("sendFileInfo");
  staff::DataObject& rdoRequest = tOperation.Request();
  rdoRequest.CreateChild("filename", filename);
  rdoRequest.CreateChild("fileInfo", fileInfo);

  // synchronous call
  tOperation.SetResponse(m_tClient.Invoke(rdoRequest));
  if (m_tClient.GetLastResponseHasFault())
  {
    STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                           tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
    STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " + tOperation.GetResponse().ToString()); // other fault
  }
}

std::string wsOCRProxy::receiveFileInfo(std::string filename)
{
  staff::Operation tOperation("receiveFileInfo");
  staff::DataObject& rdoRequest = tOperation.Request();
  rdoRequest.CreateChild("filename", filename);

  // synchronous call
  tOperation.SetResponse(m_tClient.Invoke(rdoRequest));
  if (m_tClient.GetLastResponseHasFault())
  {
    STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                           tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
    STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " + tOperation.GetResponse().ToString()); // other fault
  }

  const staff::DataObject& rdoResult = tOperation.ResultOpt();
  return rdoResult.GetText();
}

void wsOCRProxy::doOCR(std::string fileAddress)
{
  staff::Operation tOperation("doOCR");
  staff::DataObject& rdoRequest = tOperation.Request();
  rdoRequest.CreateChild("fileAddress", fileAddress);

  // synchronous call
  tOperation.SetResponse(m_tClient.Invoke(rdoRequest));
  if (m_tClient.GetLastResponseHasFault())
  {
    STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                           tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
    STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " + tOperation.GetResponse().ToString()); // other fault
  }
}

void wsOCRProxy::doOCR(double clientID)
{
  staff::Operation tOperation("doOCR");
  staff::DataObject& rdoRequest = tOperation.Request();
  rdoRequest.CreateChild("clientID", clientID);

  // synchronous call
  tOperation.SetResponse(m_tClient.Invoke(rdoRequest));
  if (m_tClient.GetLastResponseHasFault())
  {
    STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                           tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
    STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " + tOperation.GetResponse().ToString()); // other fault
  }
}

std::string wsOCRProxy::receiveOCR(std::string fileAddress)
{
  staff::Options& rOptions = m_tClient.GetOptions();
  rOptions.EnableRest(true);
  rOptions.SetToAddress(m_sServiceUri + "/receiveOCR/fileAddress=" + fileAddress);
  rOptions.SetHttpMethod("GET");
  staff::Operation tOperation("receiveOCR");
  staff::DataObject& rdoRequest = tOperation.Request();
  // synchronous call
  tOperation.SetResponse(m_tClient.Invoke(rdoRequest));
  if (m_tClient.GetLastResponseHasFault())
  {
    STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                           tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
    STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " + tOperation.GetResponse().ToString()); // other fault
  }

  const staff::DataObject& rdoResult = tOperation.ResultOpt();
  return rdoResult.GetText();
}

std::string wsOCRProxy::perform(std::string AppData)
{
  staff::Operation tOperation("perform");
  staff::DataObject& rdoRequest = tOperation.Request();
  rdoRequest.CreateChild("AppData", AppData);

  // synchronous call
  tOperation.SetResponse(m_tClient.Invoke(rdoRequest));
  if (m_tClient.GetLastResponseHasFault())
  {
    STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                           tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
    STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " + tOperation.GetResponse().ToString()); // other fault
  }

  const staff::DataObject& rdoResult = tOperation.ResultOpt();
  return rdoResult.GetText();
}


